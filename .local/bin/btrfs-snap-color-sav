#!/bin/bash
cap=$1
cap="${cap^}"
clr=$(tput sgr0)
purple=$(tput setaf 125)
blue=$(tput setaf 4)
red=$(tput setaf 1)

#########
#  HELP #
#########

if [ "$1" = "-h" -o "$1" = "--help" ]; then
  echo "$blue Usage: $clr 'sudo `basename $0`', '`basename $0`' $red MUST run as root"
  echo "$blue '@'$clr and $blue '@home' $clr restores are automatically selected with an argument"
  echo "$blue Example: $clr'sudo btrfs-snap @'$blue or $clr'sudo btrfs-snap @home'"
  exit 0
fi

####################
#  CHECK FOR ROOT  #
####################

if [ "$(id -u)" -ne 0 ]; then echo " $red Please run as root.$clr ex. sudo btrfs-snap" >&2; exit; fi

#########################
#  AUTO-ROOT SNAPSHOTS  #
#########################

if [[ "$1" = "@" ]]; then
echo
echo " root$blue '@'$clr restore selected automatically"
echo
echo " Restoring a root$blue '@'$clr snapshot creating a$blue '@_sav'$clr backup snapshot....."
echo
read -p "$red Are you sure? y/n$clr " -n 1 -r
echo    # (optional) move to a new line
if [[ ! $REPLY =~ ^[Yy]$ ]]
then
echo
echo "User Cancelled"

exit
fi
! mountpoint -q "/mnt/btrfs1" || umount -q "/mnt/btrfs1"
mkdir -p /mnt/btrfs1
mount /dev/mapper/cryptroot /mnt/btrfs1
echo
echo " Please select a root$blue '@'$clr snapshot from the list"
echo " or"
echo "$red Press ctrl-c to exit$clr "
echo
files=$(ls -r /mnt/btrfs1/@snapshots-root/root | tr '\n' '\n')
i=1

for j in $files
do
echo "$i.$j"
file[i]=$j
i=$(( i + 1 ))
done
read input
    rm -rf /mnt/btrfs1/@_sav
    mv -f /mnt/btrfs1/@ /mnt/btrfs1/@_sav
    btrfs sub snap /mnt/btrfs1/@snapshots-root/$1/${file[$input]} /mnt/btrfs1/@
mount -a
echo
echo root$blue '@'$clr snapshot restored, Please$red reboot$clr now to complete restore or
echo system will$red reboot$clr in 30 seconds...
sleep 30;systemctl reboot
exit 0
fi

#########################
#  AUTO-HOME SNAPSHOTS  #
#########################

if [[ "$1" = "@home" ]]; then
echo
echo " @home restore selected automatically"
echo
echo " Restoring a$blue '@home' snapshot and creating a$blue '@home_sav'$clr backup snapshot....."

echo
read -p "$red Are you sure?$clr y/n" -n 1 -r
echo    # (optional) move to a new line

if [[ ! $REPLY =~ ^[Yy]$ ]]
then
echo
echo "$blue User Cancelled...$clr"
    exit
fi

! mountpoint -q "/mnt/btrfs1" || umount -q "/mnt/btrfs1"
mkdir -p /mnt/btrfs1
mount /dev/mapper/cryptroot /mnt/btrfs1
echo
echo " Please select an '$1' snapshot from the list or"
echo "$red Press ctrl-c to exit$clr "
echo
files=$(ls -r /mnt/btrfs1/@snapshots-root/home | tr '\n' '\n')
i=1

for j in $files
do
echo "$i.$j"
file[i]=$j
i=$(( i + 1 ))
done
read input
    rm -rf /mnt/btrfs/$1_sav
    mv -f /mnt/btrfs1/$1 /mnt/btrfs1/$1_sav
    btrfs sub snap /mnt/btrfs1/@snapshots-root/home/${file[$input]} /mnt/btrfs1/$1
mount -a
echo
echo root$blue '$1'$clr snapshot restored, Please$red reboot$clr now to complete restore or
echo system will$red reboot$clr in 30 seconds...
sleep 30;systemctl reboot
exit 0
fi

################
#  SETUP MENU  #
################

PS3=' Choose an option: '
opts=("Create a snapshot" "Restore a snapshot" "Delete a '_sav' backup" "List snapshots (select)" "Quit")
select fav in "${opts[@]}"; do
    case $fav in

######################
#  CREATE SNAPSHOTS  #
######################

    "Create a snapshot")
    echo
    echo
      # echo "Creating an'@${cap}' snapshot ....."
select subdir in archives documents downloads music pictures torrents videos home root MainMenu
do
echo
echo "Selected: $subdir"

subdir=$subdir
uc="${subdir^}"
 if [[ "$subdir" = "home" ]]; then
 echo
#echo "home '@home' manual snapshot created..."
 echo
   btrfs-snapshot -s /home -d /.snapshots-root/home -n 20
   echo
   echo
   #exec bash "$0" "$@"
REPLY=
break
fi

if [[ "$subdir" = "root" ]]; then
echo
#echo "root '@' manual snapshot created..."
echo
   btrfs-snapshot -s / -d /.snapshots-root/root -n 20
   echo
   echo
#exec bash "$0" "$@"
REPLY=
break
fi
if [[ "$subdir" = "MainMenu" ]]; then
 echo
 echo " Return to main menu....."
 echo
 #exec bash "$0" "$@"
 REPLY=
 break
  fi
###################################
# catchall for storage subvolumes #
###################################
btrfs-snapshot -s /home/bkmo/$uc -d /.snapshots-storage/$subdir/ -n 20
echo " Manual snapshot$blue '${uc}'$clr has been created...."
echo
echo
#exec bash "$0" "$@"
REPLY=
break
done
         ;;

#######################
#  RESTORE SNAPSHOTS  #
#######################

 "Restore a snapshot")
 echo
 echo
select subdir1 in archives documents downloads music pictures torrents videos @home @ MainMenu
do
subdir1=$subdir1
uc="${subdir1^}"

if [[ "$subdir1" = "@home" ]]; then
echo
#echo "@home restore selected automatically"
echo
echo " Restoring a$blue '@home'$clr snapshot and creating a$blue '@home_sav'$clr backup snapshot....."
echo
read -p "$red Are you sure? y/n$clr " -n 1 -r
echo    # (optional) move to a new line

if [[ ! $REPLY =~ ^[Yy]$ ]]
then
 exit 0
fi

! mountpoint -q "/mnt/btrfs1" || umount -q "/mnt/btrfs1"
mkdir -p /mnt/btrfs1
mount /dev/mapper/cryptroot /mnt/btrfs1
echo
echo " Please select a$blue '@home'$clr snapshot from the list or"
echo "$red Press ctrl-c to exit$clr "
echo
files=$(ls -r /mnt/btrfs1/@snapshots-root/home | tr '\n' '\n')
i=1
for j in $files
do
echo "$i.$j"
file[i]=$j
i=$(( i + 1 ))
done
read input
    rm -rf /mnt/btrfs1/@home_sav
    mv -f /mnt/btrfs1/@home /mnt/btrfs1/@home_sav
    btrfs sub snap /mnt/btrfs1/@snapshots-root/home/${file[$input]} /mnt/btrfs1/@home
mount -a
echo
echo root$blue '@home'$clr snapshot restored, Please reboot now to complete the restore...

read -p "$blue Do you want to reboot NOW?$clr y/n " -n 1 -r
echo    # (optional) move to a new line
if [[ $REPLY =~ ^[Yy]$ ]]
then
echo system will$red reboot$clr in 15 seconds...
sleep 15;systemctl reboot
exit 0
fi

if [[ "$subdir1" = "@" ]]; then
echo
#echo "@ restore selected automatically"
echo
echo " Restore an$blue'@'$clr snapshot and creating an$blue '@_sav'$clr backup snapshot....."
echo
read -p "$red Are you sure? y/n$clr " -n 1 -r
echo    # (optional) move to a new line
fi
if [[ ! $REPLY =~ ^[Yy]$ ]]
then
exit 0
fi

! mountpoint -q "/mnt/btrfs1" || umount -q "/mnt/btrfs1"
mkdir -p /mnt/btrfs1
mount /dev/mapper/cryptroot /mnt/btrfs1
echo
echo " Please select an$blue '@'$clr snapshot from the list or"
echo "$red Press ctrl-c to exit$clr "
echo
files=$(ls -r /mnt/btrfs1/@snapshots-root/root | tr '\n' '\n')
i=1

for j in $files
do
echo "$i.$j"
file[i]=$j
i=$(( i + 1 ))
done
read input
    rm -rf /mnt/btrfs1/@_sav
    mv -f /mnt/btrfs1/@ /mnt/btrfs1/@_sav
    btrfs sub snap /mnt/btrfs1/@snapshots-root/root/${file[$input]} /mnt/btrfs1/@
mount -a
echo
echo root$blue '@'$clr snapshot restored, Please reboot now to complete the restore...

read -p "$blue Do you want to reboot NOW?$clr y/n " -n 1 -r
echo    # (optional) move to a new line
if [[ $REPLY =~ ^[Yy]$ ]]
then
echo system will$red reboot$clr in 15 seconds...
sleep 15;systemctl reboot
exit 0
fi
fi
if [[ "$subdir1" = "MainMenu" ]]; then
 echo
 echo " Return to main menu....."
 echo
 #exec bash "$0" "$@"
 REPLY=
 break
  fi

###################################
# catchall for storage subvolumes #
###################################
echo
 echo " Restore a$blue '@${uc}'$clr snapshot creating a$blue '@${uc}_sav'$clr backup snapshot."
echo
read -p "$red Are you sure you want to restore$blue '@'${uc}$red?$clr y/n" -n 1 -r
echo
echo
echo    # (optional) move to a new line

if [[ ! $REPLY =~ ^[Yy]$ ]]
then
echo
echo "$blue User Cancelled.....$clr"
echo
REPLY=
break
fi
! mountpoint -q "/mnt/btrfs" || umount "/mnt/btrfs"
mkdir -p /mnt/btrfs
! mountpoint -q "/home/bkmo/$uc" || umount -q "/home/bkmo/$uc"
mount /dev/mapper/storage /mnt/btrfs

echo
echo " Please select a$blue '@${uc}'$clr snapshot from the list"
echo " or"
echo " $red Press ctrl-c to exit $clr"
echo
files=$(ls -r /mnt/btrfs/@snapshots-storage/$subdir1 | tr '\n' '\n')
i=1

for j in $files
do
echo "$i.$j"
file[i]=$j
i=$(( i + 1 ))
done
read input
 if [[ -d "/mnt/btrfs/@${uc}_sav" ]]; then  rm -rf /mnt/btrfs/@${uc}_sav
 fi
 if [[ -d "/mnt/btrfs/@${uc}" ]]; then  mv /mnt/btrfs/@$uc /mnt/btrfs/@${uc}_sav
 fi

     btrfs sub snap /mnt/btrfs/@snapshots-storage/$subdir1/${file[$input]} /mnt/btrfs/@$uc
mount -a
echo
echo
REPLY=
break
done
 ;;

##########################
#  DELETE-SAV SNAPSHOTS  #
##########################

   "Delete a '_sav' backup")
   echo
   echo
select subdir2 in archives documents downloads music pictures torrents videos home root MainMenu
do
echo
echo "Selected: $subdir2"
echo
uc="${subdir2^}"

! mountpoint -q "/mnt/btrfs" || umount -q "/mnt/btrfs"
mkdir -p /mnt/btrfs
mount /dev/mapper/storage /mnt/btrfs
mkdir -p /mnt/btrfs1
mount /dev/mapper/cryptroot /mnt/btrfs1

if [[ "$subdir2" = "MainMenu" ]]; then
 echo
 echo " Return to main menu....."
 echo
 REPLY=
 break
fi

if [ "$subdir2" = "home" ] && [ -d "/mnt/btrfs1/@home_sav" ];then btrfs sub delete /mnt/btrfs1/@home_sav
echo
echo " Snapshot$blue '@home_sav'$clr has been deleted...."
echo
REPLY=
break
fi

if [ "$subdir2" = "root" ] && [ -d "/mnt/btrfs1/@_sav" ];then btrfs sub delete /mnt/btrfs1/@_sav
echo
echo " Snapshot$blue '@_sav'$clr has been deleted...."
echo
REPLY=
break
fi

if [ ! "$subdir2" = "root" ] && [ ! "$subdir2" = "home" ] && [ ! -d "/mnt/btrfs/@${uc}_sav" ];then
echo
echo " Snapshot$blue '@${uc}_sav'$clr$red does not exist$clr, nothing to do...."
echo
echo
sleep 3
REPLY=
break
fi

if  [ -d "/mnt/btrfs/@${uc}_sav" ];then btrfs sub delete /mnt/btrfs/@${uc}_sav
echo
echo " Snapshot$blue '{uc}_sav'$clr has been deleted...."
echo
REPLY=
break
fi

if [ "$subdir2" = "root" ] && [ ! -d "/mnt/btrfs1/@_sav" ];then
echo
echo " Snapshot$blue '@_sav'$clr$red does not exist$clr, nothing to do...."
echo
echo
sleep 3
REPLY=
break
fi

if [ "$subdir2" = "home" ] && [ ! -d "/mnt/btrfs1/@home_sav" ];then
echo
echo " Snapshot$blue '@home_sav'$clr$red does not exist$clr, nothing to do...."
echo
echo
sleep 3
REPLY=
break
fi
done
    ;;

####################
#  LIST SNAPSHOTS  #
####################

    "List snapshots (select)")
    echo
    echo

   select subdir3 in archives documents downloads music pictures torrents videos home root timeshift saved MainMenu
do
    echo "Selected: $subdir"

 if [[ "$subdir3" = "saved" ]]; then
 ! mountpoint -q "/mnt/btrfs" || umount -q "/mnt/btrfs"
 ! mountpoint -q "/mnt/btrfs1" || umount -q "/mnt/btrfs1"
mkdir -p /mnt/btrfs
mount /dev/mapper/storage /mnt/btrfs
mkdir -p /mnt/btrfs1
mount /dev/mapper/cryptroot /mnt/btrfs1
 echo
 echo STORAGE:
  find /mnt/btrfs/ -maxdepth 1 -type d -name '*_sav' -exec basename {} \; | tac -r
 echo
 echo ROOT:
 find /mnt/btrfs1/ -maxdepth 1 -type d -name '*_sav' -exec basename {} \; | tac -r
 echo
 echo "$blue Press any key to continue...$clr"
 echo
 read -s -n 1
 echo
 echo
 REPLY=
 break
 fi

 if [[ "$subdir3" = "MainMenu" ]]; then
 echo
 echo " Return to main menu....."
 echo
 REPLY=
 break
  fi

 if [[ "$subdir3" = "root" ]]; then
 echo
 ls -r /.snapshots-root/root | tr '\n' '\n'
 echo
 echo "$blue Press any key to continue...$clr"
read -s -n 1
echo
echo
 REPLY=
 break
 fi

 if [[ "$subdir3" = "home" ]]; then
 echo
  ls -r /.snapshots-root/home | tr '\n' '\n'
echo
 echo "$blue Press any key to continue...$clr"
read -s -n 1
echo
echo
 REPLY=
 break
 fi

 if [[ "$subdir3" = "timeshift" ]]; then
 ! mountpoint -q "/mnt/btrfs" || umount -q "/mnt/btrfs"
 ! mountpoint -q "/mnt/btrfs1" || umount -q "/mnt/btrfs1"
mkdir -p /mnt/btrfs1
mount /dev/mapper/cryptroot /mnt/btrfs1
echo
find /mnt/btrfs1/timeshift-btrfs/snapshots -maxdepth 2 -type d  -exec basename {} \; | tac -r
echo
echo "$blue Press any key to continue...$clr"
read -s -n 1
echo
echo
REPLY=
 break
 fi
###################################
# catchall for storage subvolumes #
###################################
 echo
  ls -r --color=auto /.snapshots-storage/$subdir | tr '\n' '\n'
echo
echo "$blue Press any key to continue...$clr"
read -s -n 1
echo
echo
REPLY=
break
 done
       ;;

##############
#  GOODBYE!  #
##############

	"Quit")
	    echo "$blue Now exiting....$clr"
	    exit
	    ;;
        *) echo "invalid option$blue $REPLY"$clr
        ;;
    esac

done
